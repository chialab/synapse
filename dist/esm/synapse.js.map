{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/Router/Path.ts", "../../src/Router/Request.ts", "../../src/Router/Response.ts", "../../src/Router/Route.ts", "../../src/Router/Pattern.ts", "../../src/Router/Middleware.ts", "../../src/Router/History.ts", "../../src/Helpers/Emitter.ts", "../../src/Router/BrowserHistory.ts", "../../src/Router/Router.ts", "../../src/Router/ErrorHandler.tsx", "../../src/App.tsx", "../../src/Components/Page.tsx", "../../src/Components/Transition.tsx", "../../src/Helpers/App.ts", "../../src/Helpers/Env.ts", "../../src/Helpers/Network.ts", "../../src/Helpers/Animations.ts", "../../src/Helpers/Scripts.ts", "../../src/Helpers/StyleSheets.ts", "../../src/Router/DocumentMetaMiddleware.ts"],
  "sourcesContent": ["export type { RequestParams } from './Router/Request';\nexport type { View, Meta } from './Router/Response';\nexport type { RouteRule, NextHandler, RouteHandler } from './Router/Route';\nexport type { MiddlewareRule, MiddlewareBeforeHandler, MiddlewareAfterHandler } from './Router/Middleware';\nexport type { RouterOptions } from './Router/Router';\nexport type { ErrorHandler } from './Router/ErrorHandler';\n\nexport * from '@chialab/dna';\nexport { Path } from './Router/Path';\nexport { Request } from './Router/Request';\nexport { Response } from './Router/Response';\nexport { Route } from './Router/Route';\nexport { Middleware } from './Router/Middleware';\nexport { History } from './Router/History';\nexport { BrowserHistory } from './Router/BrowserHistory';\nexport { Router } from './Router/Router';\nexport { App } from './App';\nexport * from './Components/Page';\nexport * from './Components/Transition';\nexport * from './Helpers/App';\nexport * from './Helpers/Env';\nexport * from './Helpers/Network';\nexport * from './Helpers/Animations';\nexport * from './Helpers/Scripts';\nexport * from './Helpers/StyleSheets';\nexport { DocumentMetaMiddleware } from './Router/DocumentMetaMiddleware';\n", "/**\n * Trim slashes from the start a string.\n * @param token The string to trim.\n * @returns THe trimmed string.\n */\nexport function trimSlashStart(token: string) {\n    return token.replace(/^\\/*/, '');\n}\n\n/**\n * Trim slashes from the end a string.\n * @param token The string to trim.\n * @returns THe trimmed string.\n */\nexport function trimSlashEnd(token: string) {\n    return token.replace(/\\/*$/, '');\n}\n\n/**\n * Trim slashes from the start and end of a string.\n * @param token The string to trim.\n * @returns THe trimmed string.\n */\nexport function trimSlash(token: string) {\n    return trimSlashStart(trimSlashEnd(token));\n}\n\n/**\n * Relative url pathname object.\n * It represents the state of am url from its base.\n */\nexport class Path {\n    #internalUrl: URL;\n\n    /**\n     * Create path.\n     * @param path Pathname.\n     */\n    constructor(path: string) {\n        this.#internalUrl = new URL(`/${trimSlash(path)}`, 'http://local');\n    }\n\n    /**\n     * Pathname part.\n     */\n    get pathname() {\n        return this.#internalUrl.pathname;\n    }\n\n    /**\n     * Hash part.\n     */\n    get hash() {\n        return this.#internalUrl.hash;\n    }\n\n\n    /**\n     * Search part.\n     */\n    get search() {\n        return this.#internalUrl.search;\n    }\n\n    /**\n     * Path search params.\n     */\n    get searchParams() {\n        return new URLSearchParams(this.#internalUrl.searchParams);\n    }\n\n    /**\n     * Computed path url.\n     */\n    get href() {\n        return `${this.pathname}${this.search}${this.hash}`;\n    }\n}\n", "import { Path } from './Path';\nimport type { Response } from './Response';\nimport type { Route } from './Route';\n\n/**\n * A set of params extracted from the request path.\n */\nexport interface RequestParams {\n    _?: string;\n    [key: string]: string | undefined;\n}\n\nexport type RequestMethod = 'get' | 'post' | 'put' | 'delete' | 'patch' | 'head' | 'options';\n\nexport interface RequestInit {\n    path?: Path;\n    method?: RequestMethod | Uppercase<RequestMethod>;\n    data?: FormData|File;\n}\n\n/**\n * A class representing a new page request in the app.\n */\nexport class Request<T extends RequestParams = RequestParams> {\n    private _childRequest?: Request;\n    private _response?: Response;\n    private _matcher?: Route;\n    private _error?: Error;\n\n    /**\n     * The requested url.\n     */\n    public readonly url: URL;\n\n    /**\n     * The requested path.\n     */\n    public readonly path: Path;\n\n    /**\n     * The parent request in case of subrouting.\n     */\n    public readonly parent?: Request;\n\n    /**\n     * The request method.\n     */\n    public readonly method: RequestMethod;\n\n    /**\n     * The request data.\n     */\n    public readonly data?: FormData|File;\n\n    /**\n     * A set of params extracted from the request path.\n     */\n    public params?: T = {} as T;\n\n    /**\n     * The resolving state of the request.\n     */\n    get resolving() {\n        return !this.response && !this.error;\n    }\n\n    /**\n     * The resolved state of the request.\n     */\n    get resolved() {\n        return !!this.response || !!this.error;\n    }\n\n    /**\n     * The child request in case of subrouting.\n     */\n    get childRequest() {\n        return this._childRequest;\n    }\n\n    /**\n     * The response instance for the request.\n     */\n    get response() {\n        return this._response;\n    }\n\n    /**\n     * The last matched route instance.\n     */\n    get matcher() {\n        return this._matcher;\n    }\n\n    /**\n     * The error instance for the request.\n     */\n    get error() {\n        return this._error;\n    }\n\n    /**\n     * Create a Request instance.\n     * @param url The url to navigate.\n     * @param parent The parent request.\n     */\n    constructor(url: URL | string, init?: RequestInit, parent?: Request) {\n        url = typeof url === 'string' ? new URL(url) : url;\n\n        this.url = url;\n        this.path = init?.path ?? new Path(`${url.pathname}${url.search}${url.hash}`);\n        this.method = init?.method?.toLowerCase() as RequestMethod || 'get';\n        this.data = init?.data;\n        this.parent = parent;\n    }\n\n    /**\n     * Create a child request for subrouting.\n     * @param url The child url.\n     */\n    child(url: URL, init?: RequestInit) {\n        return this._childRequest = new Request(url, init, this);\n    }\n\n    /**\n     * Set the matched route rule.\n     * @param route The route rule.\n     */\n    setMatcher(route: Route) {\n        this._matcher = route;\n    }\n\n    /**\n     * Set params to the request.\n     * @param params The params to set.\n     */\n    setParams(params: T) {\n        this.params = params;\n    }\n\n    /**\n     * Resolve the request.\n     * @param res The response which resolves the request.\n     */\n    resolve(res: Response) {\n        this._response = res;\n    }\n\n    /**\n     * Mark the request as errored.\n     * @param err The error which rejectes the request.\n     */\n    reject(err: Error) {\n        this._error = err;\n    }\n\n    /**\n     * Check if a request is a subrouter request.\n     * @param request The current request.\n     */\n    isSubRouteRequest(request: Request) {\n        const matcher = this.matcher;\n        if (!matcher) {\n            return false;\n        }\n\n        const router = matcher.router;\n        if (!router) {\n            return false;\n        }\n\n        return !!matcher.matches(request.url.pathname as string);\n    }\n}\n", "import type { Template } from '@chialab/dna';\nimport type { RequestInit, Request } from './Request';\n\n/**\n * A template factory for the response's view.\n * @param request The request of the routing.\n * @param response The response for the request.\n * @param context The app context.\n * @returns A template to render.\n */\nexport type View = (request: Request, response: Response) => Template;\n\n/**\n * A set of metatags to be set on the page.\n */\nexport type Meta = { [key: string]: string };\n\n/**\n * A class representing the response for a new page request in the app.\n */\nexport class Response {\n    private _childResponse?: Response | null;\n\n    /**\n     * The child response in case of subrouting.\n     */\n    get childResponse() {\n        return this._childResponse;\n    }\n\n    /**\n     * The parent response in case of subrouting.\n     */\n    public readonly parent?: Response;\n\n    /**\n     * Flag if the Response has been redirected.\n     */\n    public redirected?: string;\n\n    /**\n     * Redirection request init options.\n     */\n    public redirectInit?: RequestInit;\n\n    /**\n     * The data bound to the response.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public data: any;\n\n    protected _title?: string|undefined;\n\n    /**\n     * The title of the response.\n     */\n    public get title(): string|undefined {\n        return this._childResponse?.title ?? this._title;\n    }\n\n    /**\n     * Set the title of the response.\n     * @deprecated Use setTitle() instead.\n     */\n    public set title(title: string|undefined) {\n        this.setTitle(title);\n    }\n\n    protected _meta?: Meta|undefined;\n\n    /**\n     * The metadata associated to the response.\n     */\n    public get meta(): Meta|undefined {\n        return this._childResponse?.meta ?? this._meta;\n    }\n\n    /**\n     * Set the metadata associated to the response.\n     * @deprecated Use setMeta() instead.\n     */\n    public set meta(meta: Meta|undefined) {\n        this.setMeta(meta);\n    }\n\n    /**\n     * The view of the response.\n     */\n    public view?: View;\n\n    /**\n     * The request to respond.\n     */\n    readonly request: Request;\n\n    /**\n     * Create a Response object.\n     * @param request The request to respond.\n     */\n    constructor(request: Request, parent?: Response) {\n        this.request = request;\n        if (parent) {\n            this.parent = parent;\n            this.setData(parent.getData());\n        }\n    }\n\n    /**\n     * Set the child response in case of subrouting.\n     * @param child The child response.\n     */\n    child(child: Response | null) {\n        return this._childResponse = child;\n    }\n\n    /**\n     * Set the DNA template of the Response.\n     * @param template The view to render.\n     */\n    setView(template: View) {\n        this.view = template;\n    }\n\n    /**\n     * Get stored data.\n     * @param defaultValue Default value if missing data.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getData(defaultValue: any = null) {\n        return this.data ?? defaultValue;\n    }\n\n    /**\n     * Set data for the Response.\n     * @param data Data to set.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setData(data: any) {\n        this.data = data;\n    }\n\n    /**\n     * Set the title of the Response.\n     * @param title The string to set.\n     */\n    setTitle(title: string|undefined) {\n        this._title = title;\n        if (this._childResponse) {\n            this._childResponse.setTitle(title);\n        }\n    }\n\n    /**\n     * Set metadata to be associated to the response.\n     * @param meta The metadata to set.\n     */\n    setMeta(meta: Meta|undefined) {\n        this._meta = meta;\n        if (this._childResponse) {\n            this._childResponse.setMeta(meta);\n        }\n    }\n\n    /**\n     * Return the template to render in the app.\n     * @returns The view to render.\n     */\n    render(): Template {\n        return this.view?.(this.request, this);\n    }\n\n    /**\n     * Trigger a redirect for the response.\n     * @param path The new path to navigate.\n     * @returns The new navigation Promise.\n     */\n    redirect(path: string, init?: RequestInit) {\n        this.redirected = path;\n        this.redirectInit = init;\n    }\n}\n", "import type { Request } from './Request';\nimport type { View } from './Response';\nimport type { PatternRule } from './Pattern';\nimport type { Router } from './Router';\nimport { Response } from './Response';\nimport { Pattern } from './Pattern';\n\n/**\n * The signature of the next route rule to invoke.\n * @param request The Request instance.\n * @param response The current Response instance.\n * @param router The current router instance.\n * @returns The next Response instance.\n */\nexport type NextHandler = (request: Request, response: Response, router: Router) => Response|void|Promise<Response|void>;\n\n/**\n * The signature of a Route handler method.\n * @param request The Request instance.\n * @param response The current Response instance.\n * @param next The next method to invoke if the handler must not end the routing.\n * @param router The current router instance.\n * @returns The very same input Response instance or a new one.\n */\nexport type RouteHandler = (request: Readonly<Request>, response: Readonly<Response>, next: NextHandler, router: Router) => Response|string|void|Promise<Response|string|void>;\n\n/**\n * The interface of a route rule.\n */\nexport interface RouteRule extends PatternRule {\n    /**\n     * The callback to exec when matched.\n     */\n    handler?: RouteHandler;\n\n    /**\n     * A factory that generates the template to use when matched.\n     */\n    render?: View;\n\n    /**\n     * The child router.\n     */\n    router?: Router;\n}\n\n/**\n * The Route class.\n */\nexport class Route extends Pattern {\n    /**\n     * The callback to exec when matched.\n     */\n    private readonly handler?: RouteHandler;\n\n    /**\n     * A factory that generates the template to use when matched.\n     */\n    readonly view?: View;\n\n    /**\n     * The child router.\n     */\n    readonly router?: Router;\n\n    /**\n     * Create a Route instance.\n     * @param rule A RouteRule object.\n     */\n    constructor(rule: RouteRule) {\n        super(rule);\n        this.handler = rule.handler || (() => {});\n        this.view = rule.render;\n        this.router = rule.router;\n    }\n\n    /**\n     * Run the route handler.\n     * @param request The Request instance.\n     * @param response The current Response instance.\n     * @param next The next method to invoke if the handler must not end the routing.\n     * @param router The current router instance.\n     * @returns The very same input Response instance or a new one.\n     */\n    async exec(request: Request, response: Response, next: NextHandler, router: Router) {\n        const data = await this.handler?.(request, response, next, router);\n        if (data instanceof Response) {\n            if (data !== response) {\n                return data;\n            }\n        } else if (data) {\n            response.redirect(data);\n            return response;\n        }\n        if (this.router) {\n            response.child(await this.router.navigate(request.params?._ || '/', { method: request.method, data: request.data }, {}, false, false, request, response));\n        }\n\n        return response;\n    }\n}\n", "import type { RequestParams } from './Request';\n\n/**\n * The interface of a pattern rule.\n */\nexport interface PatternRule {\n    /**\n     * The string pattern to match using Express-style.\n     * If not provided, the wildcard '*' will be used.\n     */\n    pattern?: string;\n    /**\n     * The priority of the rule.\n     * If not provided, it will gain 20 as the default.\n     */\n    priority?: number;\n}\n\n/**\n * A Pattern instance is able to check if the provided pattern matches a path.\n */\nexport class Pattern {\n    /**\n     * Convert a pattern string into a Regular Expression.\n     * @param pattern The string to conver.\n     * @returns A RegExp that matches named groups.\n     */\n    static patternToRegex(pattern: string): [RegExp, string[]] {\n        if (pattern === '*') {\n            return [/.*/, []];\n        }\n        const names: string[] = [];\n        const chunks = pattern\n            .split('/')\n            .map((chunk) => {\n                if (!chunk) {\n                    return '';\n                }\n                if (chunk === '*') {\n                    names.push('_');\n                    return '(\\\\/.*?)?';\n                }\n                if (chunk.indexOf(':') !== 0) {\n                    return `\\\\/${chunk.replace(/([()[\\]{}\\\\\\-+.*?^$])/g, '\\\\$1')}`;\n                }\n                let name = chunk.substr(1);\n                let pattern = '\\\\/([^\\\\/]+?)';\n                if (name.endsWith('*')) {\n                    name = name.substr(0, name.length - 1);\n                    pattern = '(\\\\/.*?)?';\n                }\n                names.push(name);\n                return pattern;\n            })\n            .join('');\n\n        const regex = new RegExp(`^${chunks || '\\\\/'}(#|$)`, 'i');\n        return [regex, names];\n    }\n\n    /**\n     * The pattern rule.\n     */\n    readonly pattern: string;\n\n    /**\n     * The pattern priority.\n     */\n    readonly priority: number;\n\n    /**\n     * The RegExp (generated from path) to exec against to path.\n     * If it matches, it returns a group of matched values in the path.\n     */\n    private readonly regex: RegExp;\n\n    /**\n     * The list of names for the matched groups.\n     */\n    private readonly names: string[];\n\n    /**\n     * Cache results of regex executions.\n     */\n    private readonly cache: { [key: string]: RequestParams | false } = {};\n\n    /**\n     * Create a Pattern instance.\n     * @param rule A PatternRule object.\n     */\n    constructor(rule: PatternRule) {\n        this.pattern = rule.pattern || '*';\n        this.priority = typeof rule.priority !== 'undefined' ? rule.priority : 20;\n        const [regex, names] = (this.constructor as typeof Pattern).patternToRegex(this.pattern);\n        this.regex = regex;\n        this.names = names;\n    }\n\n    /**\n     * Run the regex on the given path.\n     * If the regex matches, return grouped values.\n     * If the regex does not matches, return false.\n     * @param path The path to check.\n     * @returns False if does not match, grouped values if it does.\n     */\n    matches(path: string): RequestParams | false {\n        path = path.split('?')[0];\n        if (this.cache[path]) {\n            return this.cache[path];\n        }\n        const match = path.match(this.regex);\n        if (!match) {\n            this.cache[path] = false;\n            return false;\n        }\n        const params: RequestParams = {};\n        this.names.forEach((n, index) => {\n            params[n] = match[index + 1];\n        });\n        this.cache[path] = params;\n        return params;\n    }\n}\n", "import type { PatternRule } from './Pattern';\nimport type { Router } from './Router';\nimport type { Request, RequestParams } from './Request';\nimport type { Response } from './Response';\nimport { Pattern } from './Pattern';\n\n/**\n * The signature of middleware handler to invoke before routing.\n * @param request The request instance.\n * @param response The current response instance.\n * @param params Middleware params extracted from the Request path.\n * @param router The current router instance.\n * @returns The Response instance.\n */\nexport type MiddlewareBeforeHandler = (request: Request, response: Response, params: RequestParams, router: Router) => Response|void|Promise<Response|void>;\n\n/**\n * The signature of middleware handler to invoke after routing.\n * @param request The request instance.\n * @param response The current response instance.\n * @param params Middleware params extracted from the Request path.\n * @param router The current router instance.\n * @returns The Response instance.\n */\nexport type MiddlewareAfterHandler = (request: Readonly<Request>, response: Response, params: RequestParams, router: Router) => Response|void|Promise<Response|void>;\n\n/**\n * The interface of a middleware rule.\n */\nexport interface MiddlewareRule extends PatternRule {\n    /**\n     * The callback to exec before routing.\n     */\n    before?: MiddlewareBeforeHandler;\n\n    /**\n     * The callback to exec after routing.\n     */\n    after?: MiddlewareAfterHandler;\n}\n\n/**\n * The Middleware class.\n */\nexport class Middleware extends Pattern {\n    /**\n     * The callback to exec before routing.\n     */\n    private readonly before?: MiddlewareBeforeHandler;\n\n    /**\n     * The callback to exec after routing.\n     */\n    private readonly after?: MiddlewareAfterHandler;\n\n    /**\n     * Create a Middleware instance.\n     * @param rule A MiddlewareRule object.\n     */\n    constructor(rule: MiddlewareRule) {\n        super(rule);\n        this.before = rule.before;\n        this.after = rule.after;\n    }\n\n    /**\n     * Exec the before hook method.\n     * @param request The Request instance.\n     * @param response The current Response instance.\n     * @param params Middleware params extracted from the Request path.\n     * @param router The current router instance.\n     * @returns The very same input Response instance or a new one.\n     */\n    hookBefore(request: Request, response: Response, params: RequestParams, router: Router) {\n        return this.before?.(request, response, params, router);\n    }\n\n    /**\n     * Exec the after hook method.\n     * @param request The Request instance.\n     * @param response The current Response instance.\n     * @param params Middleware params extracted from the Request path.\n     * @param router The current router instance.\n     * @returns The very same input Response instance or a new one.\n     */\n    hookAfter(request: Readonly<Request>, response: Response, params: RequestParams, router: Router) {\n        return this.after?.(request, response, params, router);\n    }\n}\n", "import type { State } from './State';\nimport { Emitter } from '../Helpers/Emitter';\n\nexport enum NavigationDirection {\n    back = 'back',\n    forward = 'forward',\n}\n\n/**\n * A history state representation.\n */\nexport interface HistoryState {\n    historyId: string;\n    url: string;\n    path: string;\n    title: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data: any;\n    index: number;\n    type: 'push' | 'replace';\n}\n\n/**\n * Check if a state is a synapse History state.\n * @param historyState The state to check.\n * @returns True if it is a HistoryState.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isHistoryState(historyState: any): historyState is HistoryState {\n    return historyState &&\n        typeof historyState === 'object' &&\n        typeof historyState.historyId === 'string' &&\n        typeof historyState.index === 'number';\n}\n\n/**\n * History instances counter.\n */\nlet instances = 0;\n\n/**\n * States collector.\n * An abstraction of the window.history object.\n */\nexport class History extends Emitter<{\n    'pushstate': [{ state: State; previous?: State }, void];\n    'replacestate': [{ state: State; previous?: State }, void];\n    'popstate': [{ state: State | HistoryState; previous?: State }, void];\n}> {\n    protected _entries: HistoryState[] = [];\n    protected _map: Map<HistoryState, State> = new Map();\n    protected _index = -1;\n    protected _id: string;\n\n\n    constructor() {\n        super();\n        this._id = `${Date.now()}-${instances++}`;\n    }\n\n    /**\n     * Get history states.\n     */\n    get states() {\n        return this._entries.map((entry) => this._map.get(entry));\n    }\n\n    /**\n     * Get current state.\n     */\n    get state() {\n        return this.states[this._index] ?? undefined;\n    }\n\n    /**\n     * Get current index.\n     */\n    get index() {\n        return this._index;\n    }\n\n    /**\n     * Get history length.\n     */\n    get length() {\n        return this._entries.length;\n    }\n\n    /**\n     * Start listening history changes.\n     */\n    reset() {\n        this._id = `${Date.now()}-${instances++}`;\n        this._entries.splice(0, this._entries.length);\n        this._index = -1;\n    }\n\n    /**\n     * Move in the history.\n     * @param shift The shift movement in the history.\n     */\n    async go(shift: number) {\n        if (shift === 0) {\n            return;\n        }\n        const index = this._index + shift;\n        if (index < 0 || index >= this._entries.length) {\n            return;\n        }\n        const previous = this.state;\n        this._index = index;\n        this.trigger('popstate', { state: this.state as State, previous });\n    }\n\n    /**\n     * Move back in the history by one entry. Same as `.go(-1)`\n     * @returns A promise which resolves the new current state.\n     */\n    async back() {\n        return this.go(-1);\n    }\n\n    /**\n     * Move forward in the history by one entry. Same as `.go(1)`\n     * @returns A promise which resolves the new current state.\n     */\n    async forward() {\n        return this.go(1);\n    }\n\n    /**\n     * Add a state to the history.\n     * @param state The state properties.\n     * @returns The new current state.\n     */\n    async pushState(state: State) {\n        const historyState: HistoryState = {\n            historyId: this._id,\n            url: state.url,\n            path: state.path,\n            title: state.title,\n            data: state.data,\n            index: this.index + 1,\n            type: 'push',\n        };\n        this._map.set(historyState, state);\n        this._entries = this._entries.slice(0, this._index + 1);\n        this._entries.push(historyState);\n        const previous = this.state;\n        this._index = historyState.index;\n        this.trigger('pushstate', { state: this.state as State, previous });\n        return historyState;\n    }\n\n    /**\n     * Replace the current state of the history.\n     *\n     * @param state The state properties.\n     * @returns The new current state.\n     */\n    async replaceState(state: State) {\n        const historyState: HistoryState = {\n            historyId: this._id,\n            url: state.url,\n            path: state.path,\n            title: state.title,\n            data: state.data,\n            index: Math.max(this.index, 0),\n            type: 'replace',\n        };\n        const previous = this.state;\n        this._index = historyState.index;\n        this._map.set(historyState, state);\n        this._entries[this._index] = historyState;\n        this.trigger('replacestate', { state: this.state as State, previous });\n        return historyState;\n    }\n\n    /**\n     * Compare tow states position.\n     * @param state1 The first state.\n     * @param state2 The second state.\n     */\n    compareStates(state1: State, state2: State) {\n        const states = this.states;\n        return states.indexOf(state2) < states.indexOf(state1) ?\n            NavigationDirection.back :\n            NavigationDirection.forward;\n    }\n}\n", "export interface EventMap {\n    [key: string]: [unknown, unknown];\n}\n\nexport type Arg<M extends EventMap, K extends keyof M> = M[K][0];\n\nexport type Return<M extends EventMap, K extends keyof M> = M[K][1] | null;\n\nexport type Listener<M extends EventMap, K extends keyof M> = (arg: Arg<M, K>, res: Return<M, K>) => Return<M, K>;\n\n/**\n * Base Emitter class.\n */\nexport class Emitter<M extends EventMap = {}> {\n    /**\n     * Map of listeners.\n     */\n    #listeners: {\n        [K in keyof M]?: Listener<M, K>[];\n    } = {};\n\n    /**\n     * Add listener.\n     * @param type The event name.\n     * @param listener The listener callback.\n     */\n    on<E extends keyof M>(type: E, listener: Listener<M, E>) {\n        const listeners = this.#listeners[type] = this.#listeners[type] || [];\n        listeners.push(listener);\n    }\n\n    /**\n     * Remove a listener.\n     * @param type The event name.\n     * @param listener The listener callback to remove.\n     */\n    off<E extends keyof M>(type: E, listener: Listener<M, E>) {\n        const listeners = this.#listeners[type];\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n        if (index === -1) {\n            return;\n        }\n\n        listeners.splice(index, 1);\n    }\n\n    /**\n     * Dispatch an event.\n     * @param type The event name.\n     * @param data Data to pass to listener.\n     * @returns A promise that resolves all listerner invokations.\n     */\n    trigger<E extends keyof M>(type: E, data: Arg<M, E>): Return<M, E> {\n        const listeners = this.#listeners[type];\n        if (!listeners) {\n            return;\n        }\n\n        return listeners.reduce((result: Return<M, E>, listener) => listener(data, result) ?? result, null);\n    }\n}\n", "import type { State } from './State';\nimport type { HistoryState } from './History';\nimport { window } from '@chialab/dna';\nimport { History, isHistoryState } from './History';\n\n/**\n * Flag listening state for global `popstate` event.\n */\nlet listening = false;\n\n/**\n * Ensure that the history state con be used as history state.\n * @param state History state object.\n * @returns A history state safe object.\n */\nfunction serializeHistoryState(historyState: HistoryState) {\n    return JSON.parse(JSON.stringify(historyState));\n}\n\n/**\n * History implementation that uses browser window.history.\n */\nexport class BrowserHistory extends History {\n    #adapter: typeof window.history;\n    #currentPopRequest?: { resolve: Function; reject: Function };\n\n    constructor(adapter = window.history) {\n        super();\n        this.#adapter = adapter;\n        this.listen();\n    }\n\n    /**\n     * Add global `popstate` listener.\n     */\n    listen() {\n        if (listening) {\n            throw new Error('You cannot initialize more than one \"BrowserHistory\".');\n        }\n        listening = true;\n        window.addEventListener('popstate', this.onPopState);\n    }\n\n    /**\n     * Remove global `popstate` listener.\n     */\n    unlisten() {\n        listening = false;\n        window.removeEventListener('popstate', this.onPopState);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async go(shift: number) {\n        if (this.#currentPopRequest) {\n            this.#currentPopRequest.reject();\n        }\n        return new Promise<void>((resolve, reject) => {\n            this.#currentPopRequest = { resolve, reject };\n            this.#adapter.go(shift);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async pushState(state: State) {\n        const historyState = await super.pushState(state);\n        this.#adapter.pushState(serializeHistoryState(historyState), historyState.title, historyState.url);\n\n        return historyState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async replaceState(state: State) {\n        const historyState = await super.replaceState(state);\n        this.#adapter.replaceState(serializeHistoryState(historyState), historyState.title, historyState.url);\n\n        return historyState;\n    }\n\n    /**\n     * The popstate listener.\n     * @param event The popstate event.\n     */\n    private onPopState = async (event: PopStateEvent) => {\n        if (!isHistoryState(event.state)) {\n            return;\n        }\n        const previous = this.state;\n        if (event.state.historyId !== this._id) {\n            this.reset();\n            this.trigger('popstate', { state: event.state, previous });\n        } else {\n            this._index = event.state.index;\n            this.trigger('popstate', { state: this.state as State, previous });\n        }\n\n        if (this.#currentPopRequest) {\n            this.#currentPopRequest.resolve();\n        }\n        this.#currentPopRequest = undefined;\n    };\n}\n", "import type { MiddlewareRule, MiddlewareBeforeHandler, MiddlewareAfterHandler } from './Middleware';\nimport type { RequestInit } from './Request';\nimport type { ErrorHandler } from './ErrorHandler';\nimport type { RouteRule, RouteHandler, NextHandler } from './Route';\nimport type { State } from './State';\nimport type { History, HistoryState } from './History';\nimport { window } from '@chialab/dna';\nimport { Path, trimSlash, trimSlashStart } from './Path';\nimport { Request } from './Request';\nimport { Response } from './Response';\nimport { Route } from './Route';\nimport { Middleware } from './Middleware';\nimport { BrowserHistory } from './BrowserHistory';\nimport { Emitter } from '../Helpers/Emitter';\nimport DEFAULT_ERROR_HANDLER from './ErrorHandler';\n\n/**\n * The options to pass to the router.\n */\nexport interface RouterOptions {\n    base?: string;\n    origin?: string;\n    errorHandler?: ErrorHandler;\n}\n\n/**\n * Default router origin.\n */\nexport const DEFAULT_ORIGIN = 'http://local';\n\n/**\n * A router implementation for app navigation.\n */\nexport class Router extends Emitter<{\n    'pushstate': [{ state: State; previous?: State }, void];\n    'replacestate': [{ state: State; previous?: State }, void];\n    'popstate': [{ state: State; previous?: State }, void];\n}> {\n    /**\n     * The browser's history like implementation for state management.\n     */\n    private history?: History;\n\n    /**\n     * The router error handler.\n     */\n    protected errorHandler: ErrorHandler = DEFAULT_ERROR_HANDLER;\n\n    /**\n     * A list of routes connected to the router.\n     */\n    protected readonly connectedRoutes: Route[] = [];\n\n    /**\n     * A list of middlewares connected to the router.\n     */\n    protected readonly connectedMiddlewares: Middleware[] = [];\n\n    /**\n     * Current navigation promise.\n     */\n    #navigationPromise?: Promise<Response | null>;\n\n    /**\n     * Current request.\n     */\n    #currentRequest?: Request;\n\n    /**\n     * The origin of the router.\n     */\n    #origin: string = window.location.origin !== 'null' ? window.location.origin : 'http://local';\n\n    /**\n     * The origin of the router.\n     */\n    get origin() {\n        return this.#origin;\n    }\n\n    /**\n     * The base routing path.\n     */\n    #base: string = '/';\n\n    /**\n     * The base routing path.\n     */\n    get base() {\n        return this.#base;\n    }\n\n    /**\n     * The router is started.\n     */\n    get started() {\n        return !!this.history;\n    }\n\n    /**\n     * The current router state.\n     */\n    get state() {\n        if (!this.history) {\n            return undefined;\n        }\n        return this.history.state;\n    }\n\n    /**\n     * The current router path.\n     */\n    get current() {\n        return this.state?.path;\n    }\n\n    /**\n     * Create a Router instance.\n     * @param routes A list of routes to connect.\n     * @param middlewares A list of middlewares to connect.\n     */\n    constructor(options: RouterOptions = {}, routes: (Route | RouteRule)[] = [], middlewares: (Middleware | MiddlewareRule)[] = []) {\n        super();\n\n        if (options.origin) {\n            this.setOrigin(options.origin);\n        }\n        if (options.base) {\n            this.setBase(options.base);\n        }\n        if (options.errorHandler) {\n            this.setErrorHandler(options.errorHandler);\n        }\n        if (routes) {\n            routes.forEach((route) => this.connect(route));\n        }\n        if (middlewares) {\n            middlewares.forEach((middleware) => this.middleware(middleware));\n        }\n    }\n\n    /**\n     * Set the location origin of the router.\n     * @param origin The origin value.\n     */\n    setOrigin(origin: string) {\n        if (this.history) {\n            throw new Error('Cannot set origin after router is started.');\n        }\n        this.#origin = trimSlash(origin);\n    }\n\n    /**\n     * Set the routing url base.\n     * @param base The base value.\n     */\n    setBase(base: string) {\n        if (this.started) {\n            throw new Error('Cannot set base after router is started.');\n        }\n        this.#base = base.indexOf('#') !== -1 ? `/${trimSlash(base)}` : `/${trimSlash(base.split('?')[0])}`;\n    }\n\n    /**\n     * Set the error handler of the router.\n     * @param errorHandler The error handler or undefined to restore the default error handler.\n     */\n    setErrorHandler(errorHandler?: ErrorHandler) {\n        this.errorHandler = errorHandler ?? DEFAULT_ERROR_HANDLER;\n    }\n\n    /**\n     * Handle a router navigation.\n     * @param request The request to handle.\n     * @param parentResponse The request to handle.\n     * @param data Initial response data.\n     * @returns The final response instance.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected async handle(request: Request, parentResponse?: Response, data: any = null): Promise<Response> {\n        const routes = this.connectedRoutes;\n        const middlewares = this.connectedMiddlewares;\n        const pathname = this.pathFromUrl(request.url.href) as string;\n        let response = new Response(request, parentResponse);\n        response.setData(data);\n\n        for (let i = middlewares.length - 1; i >= 0; i--) {\n            const middleware = middlewares[i];\n            const params = middleware.matches(pathname);\n            if (!params) {\n                continue;\n            }\n            try {\n                response = await middleware.hookBefore(request, response, params, this) || response;\n            } catch (error) {\n                request.reject(error as Error);\n                throw error;\n            }\n            if (response.redirected != null) {\n                request.resolve(response);\n                return response;\n            }\n        }\n\n        const starter: NextHandler = routes.reduceRight(\n            (next: NextHandler, route) => async (req, res) => {\n                if (res.redirected != null) {\n                    return res;\n                }\n                const params = route.matches(pathname);\n                if (params === false) {\n                    return next(req, res, this);\n                }\n                req.setMatcher(route);\n                req.setParams(params);\n                const newResponse = await route.exec(req, res, next, this) ?? res;\n                if (newResponse.redirected) {\n                    return newResponse;\n                }\n                res = newResponse;\n                if (route.view) {\n                    res.setView(route.view);\n                }\n                return res;\n            },\n            () => {\n                throw new Error('Not found');\n            }\n        );\n\n        try {\n            response = (await starter(request, response, this)) ?? response;\n        } catch (error) {\n            request.reject(error as Error);\n            throw error;\n        }\n\n        if (response.redirected != null) {\n            request.resolve(response);\n            return response;\n        }\n\n        for (let i = middlewares.length - 1; i >= 0; i--) {\n            const middleware = middlewares[i];\n            const params = middleware.matches(pathname);\n            if (!params) {\n                continue;\n            }\n            try {\n                response = await middleware.hookAfter(request, response, params, this) || response;\n            } catch (error) {\n                request.reject(error as Error);\n                throw error;\n            }\n            if (response.redirected != null) {\n                request.resolve(response);\n                return response;\n            }\n        }\n\n        request.resolve(response);\n\n        return response;\n    }\n\n    /**\n     * Trigger a router navigation.\n     * @param path The path to navigate.\n     * @returns The final response instance.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async navigate(path: Path | string, init?: RequestInit, data: any = null, trigger = true, force = false, parentRequest?: Request, parentResponse?: Response): Promise<Response | null> {\n        return this.setCurrentNavigation(async () => {\n            path = typeof path === 'string' ? new Path(path) : path;\n            init = { ...init, path };\n\n            const url = this.urlFromPath(path);\n            if (!this.shouldNavigate(url) && !force) {\n                this.fragment(url.hash || '');\n                return null;\n            }\n\n            const request = parentRequest ? parentRequest.child(url, init) : new Request(url, init);\n            this.setCurrentRequest(request);\n\n            let response: Response;\n            try {\n                response = await this.handle(request, parentResponse);\n            } catch (error) {\n                response = this.handleError(request, error as Error);\n            }\n\n            if (request !== this.#currentRequest) {\n                throw new Error('Request aborted.');\n            }\n\n            const title = response.title || window.document.title;\n            await this.pushState({\n                url: response.redirected || url.href,\n                path: path.href,\n                title,\n                request,\n                response,\n                data: response.getData(),\n            }, trigger);\n\n            if (response.redirected != null) {\n                return this.replace(response.redirected, response.redirectInit, data, trigger, parentRequest, parentResponse);\n            }\n\n            return response;\n        });\n    }\n\n    /**\n     * Trigger a router navigation.\n     * @param path The path to navigate.\n     * @returns The final response instance.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async replace(path: Path | string, init?: RequestInit, data: any = null, trigger = true, parentRequest?: Request, parentResponse?: Response): Promise<Response> {\n        return this.setCurrentNavigation(async () => {\n            path = typeof path === 'string' ? new Path(path) : path;\n            init = { ...init, path };\n\n            const url = this.urlFromPath(path);\n            const request = parentRequest ? parentRequest.child(url, init) : new Request(url, init);\n            this.setCurrentRequest(request);\n\n            let response: Response;\n            try {\n                response = await this.handle(request, parentResponse, data);\n            } catch (error) {\n                response = this.handleError(request, error as Error);\n            }\n\n            if (request !== this.#currentRequest) {\n                throw new Error('Request aborted.');\n            }\n\n            const title = response.title || window.document.title;\n            await this.replaceState({\n                url: response.redirected || url.href,\n                path: path.href,\n                title,\n                request,\n                response,\n                data: response.getData(),\n            }, trigger);\n\n            if (response.redirected != null) {\n                return this.replace(response.redirected, response.redirectInit, data, trigger);\n            }\n\n            return response;\n        }) as Promise<Response>;\n    }\n\n    /**\n     * Refresh the state of the router.\n     * Reset and re-start the navigation.\n     * @param path The path to use to restart the router.\n     * @returns Resolve the navigation response.\n     */\n    refresh(path?: string) {\n        return this.replace(path || this.current || '/');\n    }\n\n    /**\n     * Update page hash.\n     * @param hash The hash to set.\n     */\n    fragment(hash: string) {\n        if (this.history instanceof BrowserHistory) {\n            if (window.location.hash !== hash) {\n                window.location.hash = hash;\n            }\n        }\n    }\n\n    /**\n     * Connect a middleware.\n     * @param middleware A MiddlewareRule object.\n     * @param path The path of the middleware rule.\n     * @param after The middleware method to invoke after routing.\n     * @param before The middleware method to invoke before routing.\n     * @returns The Middleware instance.\n     */\n    middleware(middleware: Middleware | MiddlewareRule): Middleware;\n    middleware(path: string, after?: MiddlewareAfterHandler, before?: MiddlewareBeforeHandler): Middleware;\n    middleware(middlewareOrPath: Middleware | MiddlewareRule | string, after?: MiddlewareAfterHandler, before?: MiddlewareBeforeHandler): Middleware {\n        let middleware: Middleware;\n        if (middlewareOrPath instanceof Middleware) {\n            middleware = middlewareOrPath;\n        } else if (typeof middlewareOrPath === 'string') {\n            middleware = new Middleware({ pattern: middlewareOrPath, before, after });\n        } else {\n            middleware = new Middleware(middlewareOrPath);\n        }\n        this.connectedMiddlewares.push(middleware);\n        this.connectedMiddlewares.sort((route1, route2) => route2.priority - route1.priority);\n        return middleware;\n    }\n\n    /**\n     * Connect a route.\n     * @param route A RouteRule object.\n     * @param path The path of the route rule.\n     * @param handler The callback to exec when matched.\n     * @returns The Route instance.\n     */\n    connect(route: Route | RouteRule): Route;\n    connect(path: string, handler: RouteHandler): Route;\n    connect(routeOrPath: Route | RouteRule | string, handler?: RouteHandler): Route {\n        let route: Route;\n        if (routeOrPath instanceof Route) {\n            route = routeOrPath;\n        } else if (typeof routeOrPath === 'string') {\n            if (!handler) {\n                throw new Error(`Missing handler for \"${routeOrPath}\" route`);\n            }\n            route = new Route({ pattern: routeOrPath, handler });\n        } else {\n            route = new Route(routeOrPath);\n        }\n        this.connectedRoutes.push(route);\n        this.connectedRoutes.sort((route1, route2) => route2.priority - route1.priority);\n        return route;\n    }\n\n    /**\n     * Disconnect a Route or a Middleware.\n     * @param routeOrMiddleare The Route or the Middleware instance to disconnect.\n     * @returns It returns false if the given input is not connected.\n     */\n    disconnect(routeOrMiddleare: Route | Middleware): boolean {\n        if (routeOrMiddleare instanceof Route) {\n            const io = this.connectedRoutes.indexOf(routeOrMiddleare);\n            if (io !== -1) {\n                this.connectedRoutes.splice(io, 1);\n                return true;\n            }\n        } else if (routeOrMiddleare instanceof Middleware) {\n            const io = this.connectedMiddlewares.indexOf(routeOrMiddleare);\n            if (io !== -1) {\n                this.connectedMiddlewares.splice(io, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Bind the Router to a History model.\n     * @param history The history model to bind.\n     */\n    async start(history: History, pathname?: string): Promise<Response> {\n        this.history = history;\n        this.history.reset();\n        history.on('popstate', this.onPopState);\n\n        if (history instanceof BrowserHistory) {\n            return this.replace(pathname || this.pathFromUrl(window.location.href) || '/');\n        }\n\n        return this.replace(pathname || '/');\n    }\n\n    /**\n     * Unbind the Router from a History model (if bound).\n     */\n    end() {\n        if (this.history) {\n            this.history.off('popstate', this.onPopState);\n            this.history = undefined;\n        }\n    }\n\n    /**\n     * Resolve a path to full url using origin and base.\n     * @param pathname The path to resolve.\n     *\n     * @returns The full url.\n     */\n    resolve(pathname: string, full = false) {\n        const url = this.urlFromPath(pathname);\n        if (full) {\n            return url.href;\n        }\n\n        return `${url.pathname}${url.search}${url.hash}`;\n    }\n\n    /**\n     * Extract the path from a full url.\n     * @param uri The full url.\n     * @returns A path.\n     */\n    pathFromUrl(uri: URL | string) {\n        const url = typeof uri === 'string' ? new URL(uri, this.origin) : uri;\n        if (url.origin !== this.origin) {\n            return null;\n        }\n\n        const pathname = `/${trimSlashStart(url.pathname)}${url.search}${url.hash}`;\n        if (pathname !== this.base && pathname.indexOf(this.base) !== 0) {\n            return null;\n        }\n        const path = new Path(pathname.replace(this.base, ''));\n        return `${path.pathname}${path.search}`;\n    }\n\n    /**\n     * Get the full url from a path.\n     * @param path The path.\n     * @returns A url.\n     */\n    urlFromPath(path: Path | string) {\n        return new URL(`/${[this.base, typeof path === 'string' ? path : path.href]\n            .map((chunk) => trimSlash(chunk))\n            .filter((chunk) => !!chunk)\n            .join('/')}`, this.origin);\n    }\n\n    /**\n     * Get the latest navigation promise.\n     * @returns The navigation promise.\n     */\n    waitNavigation() {\n        return this.#navigationPromise;\n    }\n\n    /**\n     * Set the current navigation promise.\n     * @param callback The navigation function.\n     * @returns The navigation response.\n     */\n    private setCurrentNavigation(callback: () => Promise<Response | null>) {\n        return this.#navigationPromise = callback();\n    }\n\n    /**\n     * Set the current request.\n     * @param request The request instance.\n     */\n    private setCurrentRequest(request: Request) {\n        return this.#currentRequest = request;\n    }\n\n    /**\n     * Handle thrown error during routing.\n     * @param request The request of the routing.\n     * @param error The thrown error.\n     * @returns An error response.\n     */\n    private handleError(request: Request, error: Error) {\n        request.reject(error);\n        let response = this.errorHandler(request, error, this);\n        if (!(response instanceof Response)) {\n            const view = response;\n            response = new Response(request);\n            response.setTitle(error.message);\n            response.setView(view);\n        }\n        return response;\n    }\n\n    /**\n     * Push the current Router state to the stack.\n     * It updates History if bound.\n     * @param state The state to add.\n     * @param trigger Should trigger the event.\n     */\n    private async pushState(state: State, trigger = true) {\n        const previous = this.state;\n        if (this.history) {\n            await this.history.pushState(state);\n        }\n\n        if (trigger) {\n            await this.trigger('pushstate', {\n                state,\n                previous,\n            });\n        }\n    }\n\n    /**\n     * Replace the current Router of the stack and remove next states.\n     * It updates History if bound.\n     * @param state The state to use as replacement.\n     * @param trigger Should trigger the event.\n     */\n    private async replaceState(state: State, trigger = true) {\n        const previous = this.state;\n        if (this.history) {\n            await this.history.replaceState(state);\n        }\n\n        if (trigger) {\n            await this.trigger('replacestate', {\n                previous,\n                state,\n            });\n        }\n    }\n\n    /**\n     * Handle History pop state event.\n     * @param data Event data.\n     */\n    private onPopState = ({ state, previous }: { state: State | HistoryState; previous?: State }) => {\n        if (state) {\n            this.replace(state.path, undefined, state.data, false)\n                .then(() => {\n                    this.trigger('popstate', {\n                        state: this.state as State,\n                        previous,\n                    });\n                });\n        } else {\n            this.trigger('popstate', {\n                state,\n                previous,\n            });\n        }\n    };\n\n    /**\n     * Check if the requested path should be navigated.\n     * @param pathOrUrl The requested path or url.\n     */\n    private shouldNavigate(pathOrUrl: Path | URL) {\n        if (!this.state) {\n            return true;\n        }\n        if (pathOrUrl instanceof Path) {\n            return this.state.path !== pathOrUrl.href;\n        }\n        return this.state.url !== pathOrUrl.href;\n    }\n}\n", "import type { Router } from './Router';\nimport type { Request } from './Request';\nimport type { View } from './Response';\nimport { Response } from './Response';\n\nexport type ErrorHandler = (request: Request, error: Error, router: Router) => Response|View;\n\nfunction formatStack(error: Error) {\n    if (!error.stack) {\n        return;\n    }\n    return <p>\n        {error.stack.split(/^(.*)$/gm).map((line) => <div>{line}</div>)}\n    </p>;\n}\n\n/**\n * The default error handler.\n * @param request The request of the routing.\n * @param error The thrown error.\n * @returns An error response object.\n */\nexport default function(request: Request, error: Error) {\n    const response = new Response(request);\n    response.setTitle(error.message);\n    response.setView(() => <div>\n        <details>\n            <summary style=\"color: red\">{error.message}</summary>\n            {formatStack(error)}\n        </details>\n    </div>);\n    return response;\n}\n", "import type { Route } from './Router/Route';\nimport type { Middleware } from './Router/Middleware';\nimport type { State } from './Router/State';\nimport type { RequestInit, RequestMethod } from './Router/Request';\nimport { Component, window, property, state, observe, listen, customElementPrototype } from '@chialab/dna';\nimport { Request } from './Router/Request';\nimport { Response } from './Router/Response';\nimport { Router, DEFAULT_ORIGIN } from './Router/Router';\nimport { NavigationDirection, History } from './Router/History';\nimport { Page } from './Components/Page';\n\n/**\n * A Web Component which handles routing.\n */\n@customElementPrototype\nexport class App extends Component {\n    /**\n     * The origin of the application.\n     */\n    @property({\n        type: String,\n    })\n    get origin(): string {\n        if (this.getInnerPropertyValue('origin')) {\n            return this.getInnerPropertyValue('origin');\n        }\n        if (window.location.origin && window.location.origin !== 'null') {\n            return window.location.origin;\n        }\n\n        return DEFAULT_ORIGIN;\n    }\n    set origin(value: string) {\n        this.setInnerPropertyValue('origin', value);\n    }\n\n    /**\n     * The base url of the application.\n     */\n    @property({\n        type: String,\n    })\n    get base(): string {\n        return this.getInnerPropertyValue('base') || '/';\n    }\n    set base(value: string) {\n        this.setInnerPropertyValue('base', value);\n    }\n\n    /**\n     * The current Router Request instance.\n     */\n    @property({\n        type: Request,\n    }) request?: Request;\n\n    /**\n     * The current Router Response instance.\n     */\n    @property({\n        type: Response,\n    }) response?: Response;\n\n    /**\n     * Should auto start on connect.\n     */\n    @property({\n        type: [Boolean, String],\n    }) autostart: boolean | string = false;\n\n    /**\n     * The navigation direction.\n     */\n    @state({\n        type: String,\n        attribute: ':navigation',\n        update: false,\n    }) navigationDirection: NavigationDirection = NavigationDirection.forward;\n\n    /**\n     * The History instance for the application.\n     */\n    public history: History = new History();\n\n    /**\n     * The Router instance for the application.\n     */\n    public router: Router = new Router({\n        origin: this.origin,\n        base: this.base,\n    });\n\n    /**\n     * Routes to connect.\n     */\n    public routes: Route[] = [];\n\n    /**\n     * Middlewares to connect.\n     */\n    public middlewares: Middleware[] = [];\n\n    /**\n     * @inheritdoc\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.autostart) {\n            this.start(typeof this.autostart === 'string' ? this.autostart : undefined);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        if (!this.response) {\n            return null;\n        }\n\n        return <Page response={this.response} />;\n    }\n\n    /**\n     * Start the routing of the application.\n     * @param path The initial path to navigate.\n     */\n    async start(path?: string): Promise<Response | void> {\n        const { router, history, routes, middlewares } = this;\n        routes.forEach((route) => {\n            router.connect(route);\n        });\n        middlewares.forEach((middleware) => {\n            router.middleware(middleware);\n        });\n        router.middleware({\n            pattern: '*',\n            priority: -Infinity,\n            before: (req) => {\n                this.request = req;\n            },\n        });\n        router.on('popstate', this._onPopState);\n        router.on('pushstate', this._onPopState);\n        router.on('replacestate', this._onPopState);\n\n        const response = await router.start(history, path);\n        if (response) {\n            this.response = response;\n            return response;\n        }\n    }\n\n    /**\n     * Trigger a routing navigation.\n     * @param path The route path to navigate.\n     * @returns The response instance for the navigation.\n     */\n    navigate(path: string, init?: RequestInit): Promise<Response|null> {\n        return this.router.navigate(path, init);\n    }\n\n    /**\n     * Replace current navigation.\n     * @param path The route path to navigate.\n     * @returns The response instance for the navigation.\n     */\n    replace(path: string, init?: RequestInit): Promise<Response|null> {\n        return this.router.replace(path, init);\n    }\n\n    /**\n     * Anchors click listener.\n     * @param event The click event.\n     * @param node The anchor node.\n     */\n    @listen('click', 'a')\n    protected _handleLink(event: Event, node?: Node) {\n        if (!this.router.started) {\n            return;\n        }\n        return this.handleLink(event, node as HTMLElement);\n    }\n\n    /**\n     * Forms submit listener.\n     * @param event The submit event.\n     * @param node The form node.\n     */\n    @listen('submit', 'form')\n    protected _handleSubmit(event: Event, node?: Node) {\n        if (!this.router.started) {\n            return;\n        }\n        return this.handleSubmit(event, node as HTMLFormElement);\n    }\n\n    /**\n     * Handle click on anchors.\n     * @param event The click event.\n     * @param node The anchor node.\n     */\n    async handleLink(event: Event, node: HTMLElement) {\n        const href = node.getAttribute('href');\n        if (!href) {\n            return;\n        }\n\n        const target = node.getAttribute('target') || '_self';\n        if (target !== '_self') {\n            return;\n        }\n\n        const path = this.router.pathFromUrl(href);\n        if (!path) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        this.navigate(path);\n    }\n\n    /**\n     * Handle submit on forms.\n     * @param event The click event.\n     * @param node The anchor node.\n     */\n    async handleSubmit(event: Event, node: HTMLFormElement) {\n        const action = node.getAttribute('action');\n        if (!action) {\n            return;\n        }\n\n        const target = node.getAttribute('target') || '_self';\n        if (target !== '_self') {\n            return;\n        }\n\n        const path = this.router.pathFromUrl(action);\n        if (!path) {\n            return;\n        }\n\n        const method = node.getAttribute('method')?.toLowerCase() as RequestMethod;\n        const data = new window.FormData(node);\n\n        event.preventDefault();\n        event.stopPropagation();\n        if (method === 'get') {\n            const params = new URLSearchParams(data as unknown as Record<string, string>);\n            this.navigate(`${path.split('?')[0]}?${params}`);\n        } else {\n            this.navigate(path, {\n                method,\n                data,\n            });\n        }\n    }\n\n    /**\n     * Popstate listener.\n     * @param data Popstate data.\n     */\n    protected _onPopState = (data: { state: State; previous?: State }) => {\n        if (!data.state) {\n            return;\n        }\n        this.request = data.state.request;\n        this.onPopState(data);\n        this.response = data.state.response;\n    };\n\n    /**\n     * Handle popstate event from the router.\n     * @param data The event triggered by the router.\n     */\n    onPopState(data: { state: State; previous?: State }) {\n        const { state, previous } = data;\n        if (state && previous) {\n            this.navigationDirection = this.history.compareStates(previous, state);\n        } else {\n            this.navigationDirection = NavigationDirection.forward;\n        }\n    }\n\n    /**\n     * Trigger `onRequest` hook.\n     */\n    @observe('request')\n    protected _onRequestChanged(oldValue: Request|undefined, newValue: Request) {\n        this.onRequest(oldValue, newValue);\n    }\n\n    /**\n     * Trigger `onRequest` hook.\n     */\n    @observe('response')\n    protected _onResponseChanged(oldValue: Response|undefined, newValue: Response) {\n        this.onResponse(oldValue, newValue);\n    }\n\n    /**\n     * Hook for origin property changes.\n     */\n    @observe('origin')\n    protected _onOriginChanged() {\n        if (this.router) {\n            this.router.setOrigin(this.origin);\n        }\n    }\n\n    /**\n     * Hook for base property changes.\n     */\n    @observe('base')\n    protected _onBaseChanged() {\n        if (this.router) {\n            let base = this.base;\n            if (base[0] === '#') {\n                base = `${window.location.pathname}${window.location.search}${base}`;\n            }\n            this.router.setBase(base);\n        }\n    }\n\n    /**\n     * Request changed hook.\n     * @param oldValue The previous request object.\n     * @param newValue The new request object.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRequest(oldValue: Request|undefined, newValue: Request) {}\n\n    /**\n     * Response changed hook.\n     * @param oldValue The previous response object.\n     * @param newValue The new response object.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onResponse(oldValue: Response|undefined, newValue: Response) {}\n}\n", "import type { FunctionComponent } from '@chialab/dna';\nimport type { Response } from '../Router/Response';\n\n/**\n * Render response.\n * @param data Page data.\n * @returns A template to render the response.\n */\nexport const Page: FunctionComponent<{ response?: Response }> = function Page({ response }) {\n    return response?.render();\n};\n", "import type { FunctionComponent, Template } from '@chialab/dna';\nimport type { State } from '../Router/State';\nimport type { Router } from '../Router/Router';\nimport { window, Node } from '@chialab/dna';\n\n/**\n * Transition page renderer.\n * @param data Page children.\n * @returns The page template.\n */\nconst TransitionPage: FunctionComponent = function TransitionPage({ children }) {\n    return children;\n};\n\n/**\n * Transition component properties.\n */\ntype TransitionProps = {\n    router: Router;\n    renderer?: FunctionComponent;\n};\n\n/**\n * Render responses with page transitions.\n * @param data Page data to render.\n * @param context The render context.\n * @returns A template of pages to animate.\n */\nexport const Transition: FunctionComponent<TransitionProps> = function Transition({ router, children, renderer: Renderer = TransitionPage }, context) {\n    if (!router) {\n        throw new Error('Transition router is required');\n    }\n\n    const { start, store, requestUpdate } = context;\n    if (!start) {\n        return <Renderer key={router.state}>{children}</Renderer>;\n    }\n\n    const currentState = store.get('state') as State | undefined;\n    const root = start.parentElement;\n\n    let previousState = store.get('previousState') as State | undefined;\n    let previousChildren = store.get('previousChildren') as Template[] | undefined;\n    if (currentState !== router.state) {\n        if (root) {\n            const start = function(event) {\n                if (event.target.parentNode !== root) {\n                    return;\n                }\n\n                const counter = (store.get('counter') as number || 0) + 1;\n                store.set('counter', counter);\n            };\n\n            const end = function(event) {\n                if (event.target.parentNode !== root) {\n                    return;\n                }\n\n                const counter = (store.get('counter') as number || 0) - 1;\n                store.set('counter', counter);\n\n                if (counter === 0) {\n                    flush();\n                }\n            };\n\n            const flush = function() {\n                root.removeEventListener('animationstart', start);\n                root.removeEventListener('animationend', end);\n                store.delete('previousState');\n                store.delete('previousChildren');\n                requestUpdate?.();\n            };\n\n            root.addEventListener('animationstart', start);\n            root.addEventListener('animationend', end);\n            setTimeout(() => {\n                let node = context.start as Node;\n                while (node && node !== context.end) {\n                    node = node.nextSibling as Node;\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        const style = window.getComputedStyle(node as HTMLElement);\n                        const animation = style.getPropertyValue('animation-name');\n                        const duration = style.getPropertyValue('animation-duration');\n                        if (animation !== 'none' && duration !== '0s') {\n                            return;\n                        }\n                    }\n                }\n\n                flush();\n            });\n        }\n\n        previousState = currentState;\n        previousChildren = store.get('children') as Template[] | undefined;\n        store.set('previousState', previousState);\n        store.set('previousChildren', previousChildren);\n        store.set('counter', 0);\n        store.set('children', children);\n        store.set('state', router.state);\n    }\n\n    return <>\n        {previousState && <Renderer key={previousState}>{previousChildren}</Renderer>}\n        <Renderer key={router.state}>{children}</Renderer>\n    </>;\n};\n", "import type { Router } from '../Router/Router';\nimport { App } from '../App';\n\n/**\n * Get parent application element.\n * @param node The DOM node.\n * @returns The application element instance or null.\n */\nexport function getApp(node: Node): App | null {\n    if (node instanceof App) {\n        return node;\n    }\n    if (node.parentNode) {\n        return getApp((node.parentNode));\n    }\n    return null;\n}\n\n/**\n * Get the router instance used by the parent app.\n * @param node The DOM node.\n * @returns The application router or null.\n */\nexport function getRouter(node: Node): Router | null {\n    return getApp(node)?.router ?? null;\n}\n", "import { window } from '@chialab/dna';\n\n/**\n * Check if the current environment is browser based.\n */\nexport function isBrowser() {\n    return typeof window._jsdom === 'undefined';\n}\n\n/**\n * Check if the current environment is node based.\n */\nexport function isNode() {\n    return typeof window._jsdom !== 'undefined';\n}\n", "import type { RequestInfo as NodeRequestInfo, RequestInit as NodeRequestInit } from 'node-fetch';\nimport { window } from '@chialab/dna';\n\n/**\n * Fetch wrapper for support in Node environments.\n * @param input The url to fetch or options.\n * @param init Init options for the request.\n * @returns A promise that resolves a response.\n */\nexport async function fetch(input: RequestInfo, init?: RequestInit | undefined): Promise<Response> {\n    if (typeof window.fetch === 'function') {\n        return window.fetch(input, init);\n    }\n\n    try {\n        const { default: factory } = await import('node-fetch');\n        return factory(input as unknown as NodeRequestInfo, init as unknown as NodeRequestInit) as unknown as Promise<Response>;\n    } catch {\n        //\n    }\n\n    throw new Error('Missing fetch implementation');\n}\n", "import { window } from '@chialab/dna';\n\n/**\n * requestAnimationFrame wrapper for support in Node environments.\n * @param callback The callback to invoke.\n * @returns The numeric handle of the request.\n */\nexport function requestAnimationFrame(callback: FrameRequestCallback): number {\n    if (typeof window.requestAnimationFrame === 'function') {\n        return window.requestAnimationFrame(callback);\n    }\n\n    const timeout = setTimeout(() => callback(Date.now()), 0);\n    return timeout as unknown as number;\n}\n\n/**\n * cancelAnimationFrame wrapper for support in Node environments.\n * @param handle The handle to cancel.\n */\nexport function cancelAnimationFrame(handle: number) {\n    if (typeof window.cancelAnimationFrame === 'function') {\n        return window.cancelAnimationFrame(handle);\n    }\n\n    return clearTimeout(handle);\n}\n", "import { DOM, window } from '@chialab/dna';\n\n/**\n * Cache scripts promises.\n */\nconst SCRIPTS: Map<string, Promise<void>> = new Map();\n\n/**\n * Load a script using a <script> element.\n * @param url Url to load.\n * @param reload Should reload the script.\n * @returns A promise that resolves on script load.\n */\nexport function loadScript(url: string | URL, reload = false) {\n    const href = typeof url === 'string' ? url : url.href;\n\n    let promise = SCRIPTS.get(href);\n    if (!promise || reload) {\n        const script = DOM.createElement('script');\n        script.src = href;\n\n        promise = new Promise<void>((resolve, reject) => {\n            script.addEventListener('load', () => resolve());\n            script.addEventListener('error', () => reject());\n            script.addEventListener('abort', () => reject());\n            window.document.head.appendChild(script);\n        });\n\n        SCRIPTS.set(href, promise);\n    }\n\n    return promise;\n}\n", "import { DOM, window } from '@chialab/dna';\n\n/**\n * Cache links promises.\n */\nconst LINKS: Map<string, [HTMLLinkElement, Promise<HTMLLinkElement>]> = new Map();\n\n/**\n * Load a stylesheet using a <link> element.\n * @param url Url to load.\n * @param reload Should reload the link.\n * @returns A promise that resolves on link load.\n */\nexport function loadStyleSheet(url: string | URL, reload = false): Promise<HTMLLinkElement> {\n    const href = typeof url === 'string' ? url : url.href;\n    const loader = LINKS.get(href);\n\n    let promise;\n    if (!loader || reload) {\n        const link = DOM.createElement('link');\n        link.type = 'text/css';\n        link.rel = 'stylesheet';\n        link.href = href;\n\n        promise = new Promise<HTMLLinkElement>((resolve, reject) => {\n            link.addEventListener('load', () => (link.parentNode ? resolve(link) : reject(link)));\n            link.addEventListener('error', () => reject(link));\n            link.addEventListener('abort', () => reject(link));\n            window.document.head.appendChild(link);\n        });\n\n        LINKS.set(href, [link, promise]);\n    } else {\n        promise = loader[1];\n    }\n\n    return promise;\n}\n\n/**\n * Unload a stylesheet.\n * @param url Url of the stylesheet to unload.\n */\nexport function unloadStyleSheet(url: string | URL) {\n    const href = typeof url === 'string' ? url : url.href;\n\n    const loader = LINKS.get(href);\n    if (!loader) {\n        return;\n    }\n\n    const link = loader[0];\n    window.document.head.removeChild(link);\n    LINKS.delete(href);\n}\n", "import type { Request } from './Request';\nimport type { Meta, Response } from './Response';\nimport { document } from '@chialab/dna';\nimport { Middleware } from './Middleware';\n\nexport type TitleBuilder = (title: string | undefined, response: Response) => string;\nexport type MetaBuilder = (meta: Meta|undefined, response: Response) => Meta;\n\n/**\n * Middleware to set the document title and meta tags upon navigation.\n */\nexport class DocumentMetaMiddleware extends Middleware {\n    /**\n     * Get the owner document.\n     */\n    protected document?: Document;\n\n    /**\n     * Title builder function.\n     */\n    protected titleBuilder: TitleBuilder;\n\n    /**\n     * Meta builder function.\n     */\n    protected metaBuilder: MetaBuilder;\n\n    /**\n     * Meta tags from last invocation.\n     */\n    protected currentMeta: Meta = {};\n\n    /**\n     * Middleware rule constructor.\n     * @param doc The owner document.\n     * @param titleBuilder The title builder function.\n     * @param metaBuilder The meta builder function.\n     */\n    public constructor(doc: Document | undefined = document, titleBuilder?: TitleBuilder, metaBuilder?: MetaBuilder) {\n        super({});\n\n        this.document = doc;\n        this.titleBuilder = titleBuilder || ((title) => title || '');\n        this.metaBuilder = metaBuilder || ((meta) => meta || {});\n    }\n\n    /**\n     * Set document title and meta tags.\n     * @inheritdoc\n     */\n    public hookAfter(request: Readonly<Request>, response: Response): Response {\n        this.setTitle(this.titleBuilder(response.title, response));\n        this.setMeta(this.metaBuilder(response.meta, response));\n\n        return response;\n    }\n\n    /**\n     * Update title.\n     * @param string The title string.\n     */\n    protected setTitle(title: string): void {\n        if (this.document === undefined) {\n            return;\n        }\n\n        this.document.title = title;\n    }\n\n    /**\n     * Update meta tags.\n     * @param current Metadata for current state.\n     * @param previous Previous metadata.\n     */\n    protected setMeta(meta: Meta): void {\n        if (this.document === undefined) {\n            return;\n        }\n\n        const head = this.document.head;\n        Object.entries(meta).forEach(([name, content]) => {\n            let meta = head.querySelector(`meta[name=\"${name}\"]`);\n            if (meta !== null) {\n                meta.setAttribute('content', content);\n\n                return;\n            }\n\n            meta = head.ownerDocument.createElement('meta');\n            meta.setAttribute('name', name);\n            meta.setAttribute('content', content);\n            head.appendChild(meta);\n        });\n\n        Object.keys(this.currentMeta)\n            .filter((name) => !(name in meta))\n            .forEach((name) => {\n                const meta = head.querySelector(`meta[name=\"${name}\"]`);\n                if (meta !== null) {\n                    meta.remove();\n                }\n            });\n    }\n}\n"],
  "mappings": "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",
  "names": ["init_define_process_env", "init_define_process_env", "trimSlashStart", "token", "trimSlashEnd", "trimSlash", "_internalUrl", "Path", "path", "__privateAdd", "__privateSet", "__privateGet", "init_define_process_env", "Request", "url", "init", "parent", "Path", "route", "params", "res", "err", "request", "matcher", "init_define_process_env", "Response", "title", "meta", "request", "parent", "child", "template", "defaultValue", "data", "path", "init", "init_define_process_env", "init_define_process_env", "Pattern", "rule", "regex", "names", "pattern", "chunks", "chunk", "name", "path", "match", "params", "n", "index", "Route", "Pattern", "rule", "request", "response", "next", "router", "data", "Response", "init_define_process_env", "Middleware", "Pattern", "rule", "request", "response", "params", "router", "init_define_process_env", "init_define_process_env", "_listeners", "Emitter", "__privateAdd", "type", "listener", "__privateGet", "listeners", "index", "data", "result", "isHistoryState", "historyState", "instances", "History", "Emitter", "entry", "shift", "index", "previous", "state", "state1", "state2", "states", "init_define_process_env", "window", "listening", "serializeHistoryState", "historyState", "_adapter", "_currentPopRequest", "BrowserHistory", "History", "adapter", "window", "__privateAdd", "event", "isHistoryState", "previous", "__privateGet", "__privateSet", "shift", "resolve", "reject", "state", "init_define_process_env", "window", "init_define_process_env", "jsx", "jsxs", "formatStack", "error", "line", "ErrorHandler_default", "request", "response", "Response", "DEFAULT_ORIGIN", "_navigationPromise", "_currentRequest", "_origin", "_base", "Router", "Emitter", "options", "routes", "middlewares", "ErrorHandler_default", "__privateAdd", "window", "state", "previous", "route", "middleware", "__privateGet", "origin", "__privateSet", "trimSlash", "base", "errorHandler", "request", "parentResponse", "data", "pathname", "response", "Response", "i", "params", "error", "starter", "next", "req", "res", "newResponse", "path", "init", "trigger", "force", "parentRequest", "Path", "url", "Request", "title", "hash", "BrowserHistory", "middlewareOrPath", "after", "before", "Middleware", "route1", "route2", "routeOrPath", "handler", "Route", "routeOrMiddleare", "io", "history", "full", "uri", "trimSlashStart", "chunk", "callback", "view", "pathOrUrl", "init_define_process_env", "Component", "window", "property", "state", "observe", "listen", "customElementPrototype", "init_define_process_env", "Page", "response", "jsx", "App", "Component", "History", "Router", "data", "window", "DEFAULT_ORIGIN", "value", "Page", "path", "router", "history", "routes", "middlewares", "route", "middleware", "req", "response", "init", "event", "node", "href", "action", "method", "params", "state", "previous", "oldValue", "newValue", "base", "__decorateClass", "property", "Request", "Response", "listen", "observe", "customElementPrototype", "init_define_process_env", "window", "Node", "Fragment", "jsx", "jsxs", "TransitionPage", "children", "Transition", "router", "Renderer", "context", "start", "store", "requestUpdate", "currentState", "root", "previousState", "previousChildren", "event", "counter", "end", "flush", "node", "style", "animation", "duration", "init_define_process_env", "getApp", "node", "App", "getRouter", "init_define_process_env", "window", "isBrowser", "isNode", "init_define_process_env", "window", "fetch", "input", "init", "factory", "init_define_process_env", "window", "requestAnimationFrame", "callback", "cancelAnimationFrame", "handle", "init_define_process_env", "DOM", "window", "SCRIPTS", "loadScript", "url", "reload", "href", "promise", "script", "resolve", "reject", "init_define_process_env", "DOM", "window", "LINKS", "loadStyleSheet", "url", "reload", "href", "loader", "promise", "link", "resolve", "reject", "unloadStyleSheet", "init_define_process_env", "document", "DocumentMetaMiddleware", "Middleware", "doc", "document", "titleBuilder", "metaBuilder", "title", "meta", "request", "response", "head", "name", "content"]
}
